{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "SQL Server Backup Service",
		"description": "API para gestión automática de backups de SQL Server con transferencia por rsync\n\n## Endpoints Disponibles:\n- **GET** `/status` - Estado del servicio\n- **GET** `/databases` - Listar bases de datos disponibles\n- **GET** `/test-connection` - Probar conexión SQL Server\n- **GET** `/test-rsync` - Probar conexión rsync\n- **POST** `/backup/:database` - Backup de base específica\n- **POST** `/backup/all` - Backup de todas las bases\n\n## Variables de Entorno:\n- `{{url_api_backups}}` - URL base del servicio\n- `{{database_name}}` - Nombre de base de datos para pruebas\n\n## Configuración Requerida:\nAsegúrate de configurar las variables de entorno en el archivo .env del proyecto.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "🏥 Health & Status",
			"item": [
				{
					"name": "Get Service Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('running');",
									"});",
									"",
									"pm.test(\"Response includes config\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('config');",
									"    pm.expect(jsonData.config).to.have.property('databases');",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_api_backups}}/status",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"status"
							]
						},
						"description": "Obtiene el estado actual del servicio de backups, incluyendo:\n- Estado del servidor\n- Configuración actual\n- Bases de datos disponibles\n- Servidores SQL y rsync configurados\n- Lista de endpoints disponibles"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/status",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"status"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"running\",\n    \"timestamp\": \"2025-07-11T15:30:45.123Z\",\n    \"config\": {\n        \"databases\": [\"biometricos\", \"security_db\"],\n        \"sqlServer\": \"192.168.120.24:1433\",\n        \"rsyncServer\": \"159.223.186.132:9000\",\n        \"tempDir\": \"C:\\\\temp\"\n    },\n    \"endpoints\": [\n        \"GET  /status\",\n        \"GET  /databases\", \n        \"GET  /test-connection\",\n        \"GET  /test-rsync\",\n        \"POST /backup/:database\",\n        \"POST /backup/all\"\n    ]\n}"
						}
					]
				},
				{
					"name": "List Available Databases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has databases array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('databases');",
									"    pm.expect(jsonData.databases).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Has at least one database\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.databases.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Guardar primera base de datos para usar en otros tests",
									"var responseJson = pm.response.json();",
									"if (responseJson.databases && responseJson.databases.length > 0) {",
									"    pm.environment.set(\"database_name\", responseJson.databases[0]);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_api_backups}}/databases",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"databases"
							]
						},
						"description": "Lista todas las bases de datos configuradas para backup en el servicio.\n\nLa respuesta incluye:\n- Array de nombres de bases de datos\n- Información del servidor SQL\n- Contador total de bases disponibles"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/databases",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"databases"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"databases\": [\"biometricos\", \"security_db\"],\n    \"server\": \"192.168.120.24:1433\",\n    \"count\": 2\n}"
						}
					]
				}
			],
			"description": "Endpoints para verificar el estado y configuración del servicio"
		},
		{
			"name": "🔍 Connection Tests",
			"item": [
				{
					"name": "Test SQL Server Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful connection\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Connection is successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.connection).to.eql('OK');",
									"});",
									"",
									"pm.test(\"Response includes server info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('serverInfo');",
									"    pm.expect(jsonData.serverInfo).to.have.property('version');",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_api_backups}}/test-connection",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"test-connection"
							]
						},
						"description": "Prueba la conectividad con el servidor SQL Server configurado.\n\nVerifica:\n- Conectividad de red\n- Autenticación SQL\n- Acceso a la base de datos\n- Información del servidor\n\n⚠️ **Nota**: Este endpoint puede tomar varios segundos si hay problemas de conectividad."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/test-connection",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"test-connection"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"connection\": \"OK\",\n    \"serverInfo\": {\n        \"version\": \"Microsoft SQL Server 2019 (RTM) - 15.0.2000.5\",\n        \"server\": \"SQL-SERVER-01\",\n        \"current_time\": \"2025-07-11T15:30:45.456Z\"\n    },\n    \"timestamp\": \"2025-07-11T15:30:45.123Z\"\n}"
						},
						{
							"name": "Connection Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/test-connection",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"test-connection"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Error de conexión a SQL Server\",\n    \"details\": \"Login failed for user 'Administrator'\"\n}"
						}
					]
				},
				{
					"name": "Test Rsync Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for successful connection\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Rsync connection is successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.connection).to.eql('OK');",
									"});",
									"",
									"pm.test(\"Response includes server details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('server');",
									"    pm.expect(jsonData).to.have.property('module');",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_api_backups}}/test-rsync",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"test-rsync"
							]
						},
						"description": "Prueba la conectividad con el servidor rsync configurado.\n\nVerifica:\n- Conectividad de red al servidor rsync\n- Autenticación con el archivo de password\n- Acceso al módulo configurado\n- Existencia del archivo de password\n\n⚠️ **Nota**: Requiere que el archivo de password rsync esté configurado correctamente."
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/test-rsync",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"test-rsync"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"connection\": \"OK\",\n    \"server\": \"159.223.186.132:9000\",\n    \"module\": \"backup\",\n    \"timestamp\": \"2025-07-11T15:30:45.123Z\"\n}"
						},
						{
							"name": "Password File Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/test-rsync",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"test-rsync"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Archivo de password rsync no encontrado\",\n    \"path\": \"C:\\\\rsync_password.txt\"\n}"
						}
					]
				}
			],
			"description": "Endpoints para probar conectividad con servicios externos"
		},
		{
			"name": "💾 Backup Operations",
			"item": [
				{
					"name": "Backup Single Database",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Backup was successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response includes backup details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('filename');",
									"    pm.expect(jsonData).to.have.property('sizeMB');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"pm.test(\"Backup file size is reasonable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sizeMB).to.be.a('number');",
									"    pm.expect(jsonData.sizeMB).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response time allows for backup operations\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600000); // 10 minutos",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_api_backups}}/backup/{{database_name}}",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"backup",
								"{{database_name}}"
							]
						},
						"description": "Realiza un backup de una base de datos específica.\n\n**Proceso:**\n1. Valida que la base de datos esté en la lista permitida\n2. Crea un backup SQL con compresión\n3. Transfiere el archivo al servidor rsync\n4. Limpia el archivo temporal local\n5. Retorna información del backup creado\n\n**Parámetros de URL:**\n- `database_name`: Nombre de la base de datos (ej: biometricos, security_db)\n\n⚠️ **Nota**: Este proceso puede tomar varios minutos dependiendo del tamaño de la base de datos."
					},
					"response": [
						{
							"name": "Successful Backup",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/backup/biometricos",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"backup",
										"biometricos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": true,\n    \"message\": \"Backup de biometricos completado exitosamente\",\n    \"filename\": \"biometricos_2025-07-11_15-30-45.bak\",\n    \"sizeMB\": 142,\n    \"timestamp\": \"2025-07-11T15:35:12.456Z\"\n}"
						},
						{
							"name": "Invalid Database",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/backup/invalid_db",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"backup",
										"invalid_db"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Base de datos no válida. Disponibles: biometricos, security_db\"\n}"
						},
						{
							"name": "Backup Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/backup/biometricos",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"backup",
										"biometricos"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Error en backup SQL de biometricos: Database 'biometricos' does not exist\",\n    \"database\": \"biometricos\"\n}"
						}
					]
				},
				{
					"name": "Backup All Databases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has results array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('results');",
									"    pm.expect(jsonData.results).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response includes summary counts\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('successCount');",
									"    pm.expect(jsonData).to.have.property('failureCount');",
									"    pm.expect(jsonData.successCount).to.be.a('number');",
									"    pm.expect(jsonData.failureCount).to.be.a('number');",
									"});",
									"",
									"pm.test(\"At least one database was processed\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.results.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Each result has required fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.results.forEach(function(result) {",
									"        pm.expect(result).to.have.property('database');",
									"        pm.expect(result).to.have.property('success');",
									"    });",
									"});",
									"",
									"pm.test(\"Response time allows for multiple backups\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1800000); // 30 minutos",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_api_backups}}/backup/all",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"backup",
								"all"
							]
						},
						"description": "Realiza backup de todas las bases de datos configuradas en el servicio.\n\n**Proceso:**\n1. Itera sobre todas las bases de datos configuradas\n2. Para cada base, ejecuta el proceso completo de backup\n3. Continúa con las demás bases aunque alguna falle\n4. Retorna un resumen completo de todos los backups\n\n**Respuesta incluye:**\n- Array con resultado de cada base de datos\n- Contador de éxitos y fallos\n- Detalles de cada backup (tamaño, archivo, etc.)\n- Timestamp del proceso completo\n\n⚠️ **Nota**: Este proceso puede tomar mucho tiempo (hasta 30+ minutos) dependiendo del número y tamaño de las bases de datos."
					},
					"response": [
						{
							"name": "Successful Mass Backup",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/backup/all",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"backup",
										"all"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Proceso de backup masivo completado\",\n    \"results\": [\n        {\n            \"database\": \"biometricos\",\n            \"success\": true,\n            \"filename\": \"biometricos_2025-07-11_15-30-45.bak\",\n            \"sizeMB\": 142\n        },\n        {\n            \"database\": \"security_db\",\n            \"success\": true,\n            \"filename\": \"security_db_2025-07-11_15-35-12.bak\",\n            \"sizeMB\": 89\n        }\n    ],\n    \"successCount\": 2,\n    \"failureCount\": 0,\n    \"timestamp\": \"2025-07-11T15:40:30.789Z\"\n}"
						},
						{
							"name": "Partial Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/backup/all",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"backup",
										"all"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Proceso de backup masivo completado\",\n    \"results\": [\n        {\n            \"database\": \"biometricos\",\n            \"success\": true,\n            \"filename\": \"biometricos_2025-07-11_15-30-45.bak\",\n            \"sizeMB\": 142\n        },\n        {\n            \"database\": \"security_db\",\n            \"success\": false,\n            \"error\": \"Error en backup SQL de security_db: Insufficient disk space\"\n        }\n    ],\n    \"successCount\": 1,\n    \"failureCount\": 1,\n    \"timestamp\": \"2025-07-11T15:40:30.789Z\"\n}"
						}
					]
				}
			],
			"description": "Endpoints para ejecutar operaciones de backup"
		},
		{
			"name": "❌ Error Scenarios",
			"item": [
				{
					"name": "404 - Endpoint Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response indicates endpoint not found\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.false;",
									"    pm.expect(jsonData.error).to.include('Endpoint no encontrado');",
									"});",
									"",
									"pm.test(\"Response includes available endpoints\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('availableEndpoints');",
									"    pm.expect(jsonData.availableEndpoints).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url_api_backups}}/nonexistent-endpoint",
							"host": [
								"{{url_api_backups}}"
							],
							"path": [
								"nonexistent-endpoint"
							]
						},
						"description": "Prueba el manejo de endpoints inexistentes.\n\nEl servidor debe retornar:\n- Código 404\n- Mensaje de error claro\n- Lista de endpoints disponibles para orientar al usuario"
					},
					"response": [
						{
							"name": "404 Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url_api_backups}}/nonexistent-endpoint",
									"host": [
										"{{url_api_backups}}"
									],
									"path": [
										"nonexistent-endpoint"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"success\": false,\n    \"error\": \"Endpoint no encontrado\",\n    \"path\": \"/nonexistent-endpoint\",\n    \"availableEndpoints\": [\n        \"GET  /status\",\n        \"GET  /databases\", \n        \"GET  /test-connection\",\n        \"GET  /test-rsync\",\n        \"POST /backup/:database\",\n        \"POST /backup/all\"\n    ]\n}"
						}
					]
				}
			],
			"description": "Casos de prueba para manejo de errores"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Configuración global antes de cada request",
					"console.log('🚀 Ejecutando request a:', pm.request.url.toString());",
					"",
					"// Verificar que las variables de entorno estén configuradas",
					"if (!pm.environment.get('url_api_backups')) {",
					"    console.warn('⚠️ Variable url_api_backups no configurada');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tests globales que aplican a todas las respuestas",
					"pm.test(\"Response has correct Content-Type\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Log del resultado",
					"console.log('✅ Response Status:', pm.response.status, pm.response.code);",
					"console.log('⏱️ Response Time:', pm.response.responseTime + 'ms');"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url_api_backups",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "database_name",
			"value": "biometricos",
			"type": "string"
		}
	]
}